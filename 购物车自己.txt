模型

<?php 
namespace app\index\model;
use think\Model;
/* 
购物车
*/
class Cart extends Model
{
    // 购物车商品数量切换
    public function changeNumber($goods_id,$goods_count, $goods_attr_ids)
    {
          // 1、判断用户是否登录
          $user_info = session('user_info');
          if($user_info)
          {
              // 2、如果登录操作数据库 先查询是否存在相同商品存在 累加数量 否则写入
              $map = [
                  'goods_id'=>$goods_id,
                  'goods_attr_ids'=>$goods_attr_ids,
                  'user_id'=>$user_info['id']
              ];
              $this->where($map)->setField('goods_count',$goods_count);
          }
          else
          {
             // 3、如果没有登录操作cookie 先查询是否存在相同商品存在 累加数量否则写入
          // 读取cookie中的内容
              $cart_list = cookie('cart_list')?cookie('cart_list'):[];
              //组装下标名称  此写法约束的・规则
              $key = $goods_id.'-'.$goods_attr_ids; 
                $cart_list[$key] = $goods_count;     
              // 将数据保存到cookie中
              cookie('cart_list',$cart_list,3600*24*6);  
          }
    }
    //删除加入购物车的商品
    public function remove($goods_id,$goods_attr_ids)
    {
        
        // 1、判断用户是否登录
        $user_info = session('user_info');
        if($user_info)
        {
            // 2、如果登录操作数据库 先查询是否存在相同商品存在 累加数量 否则写入
            $map = [
                'goods_id'=>$goods_id,
                'goods_attr_ids'=>$goods_attr_ids,
                'user_id'=>$user_info['id']
            ];
            $this->where($map)->delete();
        }
        else
        {
           // 3、如果没有登录操作cookie 先查询是否存在相同商品存在 累加数量否则写入
        // 读取cookie中的内容
            $cart_list = cookie('cart_list')?cookie('cart_list'):[];
            //组装下标名称  此写法约束的・规则
            $key = $goods_id.'-'.$goods_attr_ids; 
            unset($cart_list[$key]);
            // 将数据保存到cookie中
            cookie('cart_list',$cart_list,3600*24*6);  
        }
    }
    // 计算购物总钱购物车的
    public function getTotal($data)
    {
        // $data变量为购物车的商品数据
        $total = 0;
        foreach($data as $key =>$value)
        {
            $total+=$value['goods_count']*$value['goods']['shop_price'];
            return $total;
        }
    }
    // 显示购物车列表
    public function getList()
    {
        $user_info = session('user_info');//获取session数据
        if($user_info)
        {
            // 登录情况
            $cart_list = db('cart')->where('user_id',$user_info)->select();
        }
        else
        {
            // 未登录情况
            $cart = cookie('cart_list')?cookie('cart_list'):[];
            $cart_list = [];
            foreach($cart as $key => $value)
            {
                // 提取key中内容・
                $temp = explode('-',$key);
                $cart_list[] = [
                    'goods_id'=>$temp[0],
                    'goods_count'=>$value,
                    'goods_attr_ids'=>$temp[1]
                ];
            }
        }
        // dump($cart_list);
        // 循环获取数据
        foreach($cart_list as $key => $value)
        {
            // 获取・商品基本信息
            $cart_list[$key]['goods'] = db('goods')->where('id',$value['goods_id'])->find();
            //获取商品属性值信息
            $sql ="SELECT a.attr_value,b.attr_name FROM shop_goods_attr a LEFT JOIN shop_attribute b on a.attr_id = b.id WHERE a.id IN({$value['goods_attr_ids']})";

            $cart_list[$key]['attrs']=db('goods_attr')->query($sql);
        }
        // dump($cart_list);
        // 返回给调用者
        return $cart_list;
    }
    // 商品加入购物车
    public function addCart($goods_id,$goods_count,$goods_attr_ids)
    {
        // 1、判断用户是否登录
        $user_info = session('user_info');
        if($user_info)
        {
            // 2、如果登录操作数据库 先查询是否存在相同商品存在 累加数量 否则写入
            $map = [
                'goods_id'=>$goods_id,
                'goods_attr_ids'=>$goods_attr_ids,
                'user_id'=>$user_info['id']
            ];
            if($this->where($map)->find())
            {
                // setInc设置指定字段的值增加
                $this->where($map)->setInc('goods_count',$goods_count);
            }
            else
            {
                // 不存在相同的商品写入
                $map['goods_count'] = $goods_count;
                $this->save($map);
            }
        }
        else
        {
        // 3、如果没有登录操作cookie 先查询是否存在相同商品存在 累加数量否则写入
        // 读取cookie中的内容
            $cart_list = cookie('cart_list')?cookie('cart_list'):[];
            //组装下标名称  此写法约束的・规则
            $key = $goods_id.'-'.$goods_attr_ids; 
            // 判断是否存在
            if(array_key_exists($key,$cart_list))
            {
                // 累数量
                $cart_list[$key] += $goods_count;
            }
            else
            {
                $cart_list[$key] = $goods_count;
            }
            // 将数据保存到cookie中
            cookie('cart_list',$cart_list,3600*24*6);
        }
    }
}





控制器

<?php
namespace app\index\controller;
use think\Request;
/* 
前端用户类购物车
*/
class Cart extends Common
{
    // ajax  修改数量
    public function changeNumber()
    {
        $goods_id = input('goods_id/d');//获取到要删除s商品的ID
        $goods_count =input('goods_count/d');//获取总数ID
        $goods_attr_ids = input('goods_attr_ids');//属性值的ID组合 goods_attr表的ID组合
        model('Cart')->changeNumber($goods_id,$goods_count, $goods_attr_ids);
        return json(['code'=>1]);
    }
    // 删除购物车
    public function remove()
    {
        $goods_id = input('goods_id/d');//获取到要删除s商品的ID
        $goods_attr_ids = input('goods_attr_ids');//属性值的ID组合 goods_attr表的ID组合
        model('Cart')->remove($goods_id,$goods_attr_ids);
        $this->success('ok','index');
    }
    // 显示购物车页面(列表) 
    public function index()
    {
        $data = model('Cart')->getList();//助手函数调用模型Cart类下的方法
        // 分配模板
        $this->assign('data',$data);
        // 计算购物总数
        $total = model('Cart')->getTotal($data);
        // 分配总数模板
        $this->assign('total',$total);
        // dump($data);exit;
        // 返回给调用者・渲染模板
        return $this->fetch();
    }
    //   商品加入购物车
    public function addCart()
    {
        // dump(input());
        // 接受需要的参数
        $goods_id = input('goods_id/d');
        $goods_count = input('goods_count/d');
        $goods_attr_ids = input('attr_id/a',[]);
        // 将属性值ID组合转换为逗号分隔的字符串
        $goods_attr_ids = implode(',',$goods_attr_ids);
        model('Cart')->addCart($goods_id,$goods_count,$goods_attr_ids);
        echo 'ok';
    }
}